[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/valtuutus/valtuutus")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v6.0", FrameworkDisplayName=".NET 6.0")]
namespace Valtuutus.Data
{
    public static class DependencyInjectionExtensions
    {
        public static Valtuutus.Data.IValtuutusDataBuilder AddConcurrentQueryLimit(this Valtuutus.Data.IValtuutusDataBuilder builder, int limit) { }
        public static Valtuutus.Data.IValtuutusDataBuilder AddValtuutusData(this Microsoft.Extensions.DependencyInjection.IServiceCollection services) { }
    }
    public interface IValtuutusDataBuilder
    {
        Valtuutus.Data.ValtuutusDataOptions Options { get; }
        Microsoft.Extensions.DependencyInjection.IServiceCollection Services { get; }
    }
    public abstract class RateLimiterExecuter : System.IDisposable
    {
        protected RateLimiterExecuter(Valtuutus.Data.ValtuutusDataOptions options) { }
        public void Dispose() { }
        protected System.Threading.Tasks.Task<T> ExecuteWithRateLimit<T>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<T>> action, System.Threading.CancellationToken ct) { }
    }
    public class ValtuutusDataOptions : System.IEquatable<Valtuutus.Data.ValtuutusDataOptions>
    {
        public ValtuutusDataOptions() { }
        public int MaxConcurrentQueries { get; }
    }
}